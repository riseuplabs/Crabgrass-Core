//
// ICONS AS BACKGROUND IMAGES
//

// Most often, we display icons as background images. This is used for small
// icons, big icons, and for avatar icons.
//
// The basic idea is that we add some left-padding and then position the background
// image in the space created. This has the advantage of telling the browser to
// load the images later, there is very little markup, and it is easy to add
// icons to existing elements.
//
// Using this method, the horizontal spacing is no problem. However, vertical
// spacing is a bit more of a pain. There are three methods we can use to
// ensure the element has enough height for the icon:
//
// * vertical padding:
//   Using this method, you add a few pixels of top and bottom padding to try
//   to give the element enough height. This is OK, but creates inconsistant
//   results with different font sizes and font families.
//   This is the only method that works with display:inline.
//
// * line-height:
//   using this method, you set the line height of the element to be greater than
//   the size of the icon. This works great, so long as the element doesnt have
//   text that wraps on multiple lines, then this method really sucks.
//   This requires display:block or display:inline-block.
//
// * min-height:
//   this problem seems like a job for min-height, but this only works in modern
//   browsers. ie7-js supposedly makes min-height work for older IEs, so maybe
//   this is the way to go for blocks. also, min-height will not vertically center
//   the text and the icon, so it looks bad.
//   This requires display:block or display:inline-block.
//
//
// There is no good method that works in all cases. We use each of these
// hacks for different icon sizes, for single line or multi line text, and for inline
// or block elements.
//
// Here is a chart overview of the icon hacks we use:
//
// lines   icon   element  classes             hack used
// ----------------------------------------------------------------------------
// *       =16px  inline   .icon.inline        1px padding
// *       =16px  block    .icon               no hacks needed!
// *       >16px  inline   -                   avoid, it always looks horrible.
// single  >16px  block    .icon.single.large  line-height, height, overflow:hidden
// multi   >16px  block    .icon.large         min-height
//
// the default assumption is 'block', 'multi', and 'tiny' (16x16 px).
//
// these defaults can be overridden by adding the classes 'inline', 'single', or
// one of 'xsmall', 'small', 'medium', 'large', 'xlarge', 'big'.
//
// notes on these hacks:
//
// * small icon, inline:
//   setting a 1px padding seems to change the rendering algorithm in such a way
//   that the icon is more vertically centered on the text.
//
// * large icon, single line:
//   together, setting line-height and height will center the text on the icon,
//   give the icon enough space, and ensure that we don't break across multiple
//   lines (multiple lines look bad when line-height is set).
//
// * large icon, multi line: min-height allows the icon to be fully visible if
//   there is only a single line of text, although it does not center the icon
//   vertically unless there are multiple lines of text.
//
// min-height is applied to single line icons larger than 16px, but it is not
// needed. the styles are just easier that way.
//

//
// icon sizes, as defined in avatar.rb (and automatically imported by the
// default theme):
//
// $icon_tiny    = 16px;
// $icon_xsmall  = 22px;
// $icon_small   = 32px;
// $icon_medium  = 48px;
// $icon_large   = 60px;
// $icon_xlarge  = 96px;
// $icon_big     = 202px;
//

.icon {
  background-repeat: no-repeat !important;   // single icon
  background-position: 0 50% !important;     // flush left, vertical align middle

  // defaults to be overridden by additional classes
  display: block;                             // default to block, use class 'inline' to change
  padding-left: $icon_tiny + 4px !important;  // create space for the icon to appear

  &.inline {
    display: inline;
    padding: 1px;
  }
  &.inline-block, &.btn {
    display: inline-block;  // not supported in ie6
  }

  &.single {
    overflow: hidden;  // only applies when display:block
  }

  &.tiny {
    &.indent {
      padding-left: $icon_tiny + $icon_tiny/2 + 4px !important;
      background-position: $icon_tiny/2 50% !important;
    }
  }

  &.xsmall {
    padding-left: $icon_xsmall + 6px !important;
    min-height: $icon_xsmall;
    &.single {
      line-height: $icon_xsmall;
      height: $icon_xsmall;
    }
    &.indent {
      padding-left: $icon_xsmall + $icon_xsmall/2 + 6px !important;
      background-position: $icon_xsmall/2 50% !important;
    }
  }

  &.small {
    font-size: 100%;
    padding-left: $icon_small + 8px !important;
    min-height: $icon_small;
    &.single {
      line-height: $icon_small;
      height: $icon_small;
    }
    //&.right {
    //  padding-right: $icon_small + 8px !important;
    //}
  }

  &.medium {
    padding-left: $icon_medium + 12px !important;
    min-height: $icon_medium;
    &.single {
      line-height: $icon_medium;
      height: $icon_medium;
    }
  }

  // some elements may want the icon to vertically aligned top instead of middle.
  &.top {
    background-position: 0 0 !important; // flush left, vertical align top
  }

  // flip the icon to be on the right side instead of the left
  &.right {
    background-position: 100% 50% !important;
    padding-right: $icon_tiny + 4px !important;
    padding-left: 12px !important; // 12px is a magic number. It is what default bootstrap buttons are.
  }

  // icon inside bootstrap button
  &.btn {
    padding-left: $icon_tiny + 4px + 12px !important;
    background-position: 12px 50% !important;
  }
}

td.icon {
  display: table-cell;
}

//
// an empty icon
// the actual image icons are defined in png.css or gif.css
//

.none_16 { background-image: none; }

//
// a special spinning small icon
//

.spinner_icon {
  background-image: url(/images/spinner.gif);
}

//
// for creating a clickable link that has no text but just
// the icon. see link_helper.rb
//

a.small_icon_button {
  height: 16px;
  width: 16px;
  display: inline-block;
  padding: 0;
  background-repeat: no-repeat;
  background-position: 0 0;
  vertical-align: middle; // really needed
}

//
// for displaying xsmall icons inline. no link or text.
//

i.small_icon {
  display: inline-block;
  width: 16px;
  height: 16px;
  line-height: 16px;
  vertical-align: text-top;
  padding: 0;
  border: 0;
}

//
// currently used in the table-list view for pages.
//

i.page_icon {
  @extend .small_icon;
  height: $icon_tiny;
  width: $icon_tiny;
  line-height: $icon_tiny;
}

//
// I changed this from 'button' to 'i' tag, since that is what bootstrap uses.
// Here is the old CSS:
//
// button.small_icon {
//   width: 16px;
//   padding: 0;
//   border: 0;
//   background-color: transparent;
// }
//

//
// mobi icons are used to transform some text into icons when the
// screen gets very small. by default, these elements are hidden.
//
//
//.mobi_icon {
//  display: none;
//}

