//
// GENERAL FORM STYLING
//

//
// in general, horizontal resizing messes up the layout.
// so, if you want that, enable it explicitly.
//

textarea {
  resize: vertical;
  // somehow pading and border seem to be counted for text areas
  width: 220px;
}

//
// sometimes, we want big input fields
//
input.big {
  font-size: $font_heading_h2_size !important;
}

//
// sometimes we really want full width controls.
// this flies in the face of what bootstrap does for control sizes, so we have
// to step on bootstraps toes a bit to make this work.
//

input, textarea {
  &.full_width {
    width: 100%;
    height: inherit;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
  }
}

//
// this seems to make form elements line up better,
// especially in chrome:
//

// textarea, input[type=submit], input[type=button] {margin: 0;}

//
// form elements are often really misaligned because in the w3c box
// model all the border decoration is put outside the content box, but this
// decoration varies a lot in different form elements and in different
// operating systems.
//
// this is an attempt to make all the form elements have widths based
// on the entire box, not just the content.
//
// among other things, this allows us to do this and have it actually produce
// an even 10px padding around the textarea:
//
// <div style="padding: 10px">
//    <textarea style="width:100%"></textarea>
// </div>
//
// without setting box-sizing to be border-box, the textarea appears to have
// no padding to the right, because the decoration can easily add 8px to the
// total width.
//
// see http://www.quirksmode.org/css/box.html
//

// textarea, input, select {
textarea {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
}

//
// the button row of a form, right aligned
//
.right_buttons {
  margin-top: 0.75em;
  text-align: right;

  // // button_to makes its own form+div, but we want it to dispaly inline
  // // despite this.
  // form.button-to {
  //   display: inline;
  //   div {
  //     display: inline;
  //   }
  // }

  //input[type=submit], input[type=button] {
  //  font-size: 1.15em;
  //  margin-left: 1em;
  //}
  //&.right  {text-align: right;}
  //&.left   {text-align: left;}
  //&.center {text-align: center;}
}

//
// the order of submit tags matters. although there is no requirement in html
// for this to be the case, and so it might be a bad idea, we often rely on
// the fact that all browsers will use the first submit tag when the user
// hits return. we often want the first submit tag to be a cancel button.
// the class reverse will allow us to put the cancel button last, but have
// it appear first, which is more the standard.
// TODO: add RTL support.
//

.reverse {
  overflow: auto; // self clear
  input[type=submit], input[type=button], img {
    float: right;
    margin-left: 1em;
  }
}

//
// RADIO BUTTONS AND CHECK BOXES
//

// // make checkboxes have a hanging indent look, like bullets.
// label.checkbox, label.radio {
//   display: block;
//   margin-left: 1.7em;
// }
// input.checkbox, input.radio {
//   // position: relative;
//   // top: 2px
//   margin-left: -1.6em;
// }

// // in webkit and gecko, checkboxes and radio buttons seem to look better this way
// input[type=radio], input[type=checkbox] {
//   vertical-align: top;
//   float: left;
// }

div.image_preview {
  width: 250px;
  height: 200px;
  overflow: auto;
  text-align: center;
  font-size: .4em;
}

div.image_selector {
  float: left;
  padding: .5em;
  margin: .2em;
  border: 1px solid lightgray;
}

.image_select_list{
  input[type=radio] {
    display: none;
  }
  input:checked + label {
    background: blue
  }
}

iframe#upload_frame {
  width: 1px;
  height: 1px;
}
